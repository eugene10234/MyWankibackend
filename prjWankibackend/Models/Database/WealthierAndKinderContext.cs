// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace prjWankibackend.Models.Database;

public partial class WealthierAndKinderContext : DbContext
{
    public WealthierAndKinderContext(DbContextOptions<WealthierAndKinderContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TBlacklist> TBlacklists { get; set; }

    public virtual DbSet<TBlock> TBlocks { get; set; }

    public virtual DbSet<TBroker> TBrokers { get; set; }

    public virtual DbSet<TComment> TComments { get; set; }

    public virtual DbSet<TCustomerInvestAccount> TCustomerInvestAccounts { get; set; }

    public virtual DbSet<TCustomerPreference> TCustomerPreferences { get; set; }

    public virtual DbSet<TCustomerStra> TCustomerStras { get; set; }

    public virtual DbSet<TDistrict> TDistricts { get; set; }

    public virtual DbSet<TEmployeeMember> TEmployeeMembers { get; set; }

    public virtual DbSet<TFollower> TFollowers { get; set; }

    public virtual DbSet<TGroupMember> TGroupMembers { get; set; }

    public virtual DbSet<THashtag> THashtags { get; set; }

    public virtual DbSet<THelp> THelps { get; set; }

    public virtual DbSet<THelpClass> THelpClasses { get; set; }

    public virtual DbSet<THelpMessageRecord> THelpMessageRecords { get; set; }

    public virtual DbSet<THelpSkill> THelpSkills { get; set; }

    public virtual DbSet<TInvestRecord> TInvestRecords { get; set; }

    public virtual DbSet<TLike> TLikes { get; set; }

    public virtual DbSet<TLoginRecord> TLoginRecords { get; set; }

    public virtual DbSet<TMatch> TMatches { get; set; }

    public virtual DbSet<TMemberSkill> TMemberSkills { get; set; }

    public virtual DbSet<TMessage> TMessages { get; set; }

    public virtual DbSet<TMgerScActivity> TMgerScActivities { get; set; }

    public virtual DbSet<TMgrScFile> TMgrScFiles { get; set; }

    public virtual DbSet<TOrder> TOrders { get; set; }

    public virtual DbSet<TOrderDetail> TOrderDetails { get; set; }

    public virtual DbSet<TPersonMember> TPersonMembers { get; set; }

    public virtual DbSet<TPointList> TPointLists { get; set; }

    public virtual DbSet<TPost> TPosts { get; set; }

    public virtual DbSet<TProduct> TProducts { get; set; }

    public virtual DbSet<TProductCategory> TProductCategories { get; set; }

    public virtual DbSet<TRefreshToken> TRefreshTokens { get; set; }

    public virtual DbSet<TSponsor> TSponsors { get; set; }

    public virtual DbSet<TSponsorCategory> TSponsorCategories { get; set; }

    public virtual DbSet<TStock> TStocks { get; set; }

    public virtual DbSet<TStockInStock> TStockInStocks { get; set; }

    public virtual DbSet<TTranRecord> TTranRecords { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TBlacklist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Blacklis__3214EC07B4CE1EF9");

            entity.ToTable("tBlacklists");

            entity.HasIndex(e => e.BlockedUserId, "IX_Blacklists_BlockedUserId");

            entity.HasIndex(e => e.IsActive, "IX_Blacklists_IsActive");

            entity.Property(e => e.BlockedUserId).IsRequired();
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Reason).HasMaxLength(500);
        });

        modelBuilder.Entity<TBlock>(entity =>
        {
            entity.HasKey(e => e.FBlockSid);

            entity.ToTable("tBlock");

            entity.Property(e => e.FBlockSid).HasColumnName("fBlockSId");
            entity.Property(e => e.FBlockType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fBlockType");
            entity.Property(e => e.FBlockUserId)
                .HasMaxLength(20)
                .HasColumnName("fBlockUserId");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
        });

        modelBuilder.Entity<TBroker>(entity =>
        {
            entity.HasKey(e => e.FBrokerId).HasName("PK__tBroker__41F14AB6745A9C6D");

            entity.ToTable("tBroker");

            entity.Property(e => e.FBrokerId)
                .HasMaxLength(50)
                .HasColumnName("fBrokerId");
            entity.Property(e => e.FBrokerName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("fBrokerName");
        });

        modelBuilder.Entity<TComment>(entity =>
        {
            entity.HasKey(e => e.FCommentId);

            entity.ToTable("tComment");

            entity.Property(e => e.FCommentId).HasColumnName("fCommentId");
            entity.Property(e => e.FContent)
                .HasMaxLength(500)
                .HasColumnName("fContent");
            entity.Property(e => e.FCratedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCratedAT");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FPostId).HasColumnName("fPostId");
            entity.Property(e => e.FUpdateAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdateAt");
        });

        modelBuilder.Entity<TCustomerInvestAccount>(entity =>
        {
            entity.HasKey(e => e.FInvestAccountId).HasName("PK__tCustome__B185030D21627549");

            entity.ToTable("tCustomerInvestAccount");

            entity.Property(e => e.FInvestAccountId)
                .ValueGeneratedNever()
                .HasColumnName("fInvestAccountId");
            entity.Property(e => e.FBrokerId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fBrokerId");
            entity.Property(e => e.FInvestAccount)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("fInvestAccount");
            entity.Property(e => e.FInvestPass)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("fInvestPass");
            entity.Property(e => e.FMemberId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fMemberId");
        });

        modelBuilder.Entity<TCustomerPreference>(entity =>
        {
            entity.HasKey(e => e.FPreferId).HasName("PK__tCustome__04C2DDC6E0778F80");

            entity.ToTable("tCustomerPreference");

            entity.Property(e => e.FPreferId).HasColumnName("fPreferId");
            entity.Property(e => e.FMemberId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FStockId).HasColumnName("fStockId");
        });

        modelBuilder.Entity<TCustomerStra>(entity =>
        {
            entity.HasKey(e => e.FStraId).HasName("PK__tCustome__3FE09AD1FA411830");

            entity.ToTable("tCustomerStra");

            entity.Property(e => e.FStraId).HasColumnName("fStraId");
            entity.Property(e => e.F10Ma)
                .HasColumnType("money")
                .HasColumnName("f10MA");
            entity.Property(e => e.F20Ma)
                .HasColumnType("money")
                .HasColumnName("f20MA");
            entity.Property(e => e.F5Ma)
                .HasColumnType("money")
                .HasColumnName("f5MA");
            entity.Property(e => e.FBuySell).HasColumnName("fBuySell");
            entity.Property(e => e.FDvalue).HasColumnName("fDValue");
            entity.Property(e => e.FKvalue).HasColumnName("fKValue");
            entity.Property(e => e.FMemberId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FPriceSet)
                .HasColumnType("money")
                .HasColumnName("fPriceSet");
            entity.Property(e => e.FStockId).HasColumnName("fStockId");
            entity.Property(e => e.FTranType)
                .HasMaxLength(50)
                .HasColumnName("fTranType");
        });

        modelBuilder.Entity<TDistrict>(entity =>
        {
            entity.HasKey(e => e.FDistrictId);

            entity.ToTable("tDistrict");

            entity.Property(e => e.FDistrictId).HasColumnName("fDistrictId");
            entity.Property(e => e.FDistrict)
                .HasMaxLength(50)
                .HasColumnName("fDistrict");
        });

        modelBuilder.Entity<TEmployeeMember>(entity =>
        {
            entity.HasKey(e => e.FEmployeeSid);

            entity.ToTable("tEmployeeMember");

            entity.Property(e => e.FEmployeeSid).HasColumnName("fEmployeeSId");
            entity.Property(e => e.FAccount)
                .HasMaxLength(50)
                .HasColumnName("fAccount");
            entity.Property(e => e.FBirthDate).HasColumnName("fBirthDate");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FFirstName)
                .HasMaxLength(50)
                .HasColumnName("fFirstName");
            entity.Property(e => e.FIdentification)
                .HasMaxLength(20)
                .HasColumnName("fIdentification");
            entity.Property(e => e.FIp)
                .HasMaxLength(50)
                .HasColumnName("fIp");
            entity.Property(e => e.FLastName)
                .HasMaxLength(50)
                .HasColumnName("fLastName");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FMemberImage).HasColumnName("fMemberImage");
            entity.Property(e => e.FMemberImagePath)
                .HasMaxLength(50)
                .HasColumnName("fMemberImagePath");
            entity.Property(e => e.FPassword)
                .HasMaxLength(20)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPermissions).HasColumnName("fPermissions");
            entity.Property(e => e.FRegDate).HasColumnName("fRegDate");
            entity.Property(e => e.FSex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fSex");
            entity.Property(e => e.FStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fStatus");
            entity.Property(e => e.FUserName)
                .HasMaxLength(50)
                .HasColumnName("fUserName");
        });

        modelBuilder.Entity<TFollower>(entity =>
        {
            entity.HasKey(e => e.FFollowerSid);

            entity.ToTable("tFollower");

            entity.Property(e => e.FFollowerSid).HasColumnName("fFollowerSId");
            entity.Property(e => e.FFollowerMemberId)
                .HasMaxLength(20)
                .HasColumnName("fFollowerMemberId");
            entity.Property(e => e.FFollowingMemberId)
                .HasMaxLength(20)
                .HasColumnName("fFollowingMemberId");
        });

        modelBuilder.Entity<TGroupMember>(entity =>
        {
            entity.HasKey(e => e.FGroupSid);

            entity.ToTable("tGroupMember");

            entity.Property(e => e.FGroupSid).HasColumnName("fGroupSId");
            entity.Property(e => e.FAccount)
                .HasMaxLength(50)
                .HasColumnName("fAccount");
            entity.Property(e => e.FCoLocation)
                .HasMaxLength(50)
                .HasColumnName("fCoLocation");
            entity.Property(e => e.FCorporation)
                .HasMaxLength(50)
                .HasColumnName("fCorporation");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FIp)
                .HasMaxLength(50)
                .HasColumnName("fIp");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FMemberImage).HasColumnName("fMemberImage");
            entity.Property(e => e.FMemberImagePath)
                .HasMaxLength(50)
                .HasColumnName("fMemberImagePath");
            entity.Property(e => e.FPassword)
                .HasMaxLength(20)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPermissions).HasColumnName("fPermissions");
            entity.Property(e => e.FRegDate).HasColumnName("fRegDate");
            entity.Property(e => e.FRepresentName)
                .HasMaxLength(50)
                .HasColumnName("fRepresentName");
            entity.Property(e => e.FStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fStatus");
            entity.Property(e => e.FTotalCapital).HasColumnName("fTotalCapital");
            entity.Property(e => e.FUniBusinessNo)
                .HasMaxLength(50)
                .HasColumnName("fUniBusinessNo");
        });

        modelBuilder.Entity<THashtag>(entity =>
        {
            entity.HasKey(e => e.FHashTagSid);

            entity.ToTable("tHashtag");

            entity.Property(e => e.FHashTagSid).HasColumnName("fHashTagSId");
            entity.Property(e => e.FHashTag)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fHashTag");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FMemberType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fMemberType");
            entity.Property(e => e.FPostId).HasColumnName("fPostId");
        });

        modelBuilder.Entity<THelp>(entity =>
        {
            entity.HasKey(e => e.FHelpId);

            entity.ToTable("tHelp");

            entity.Property(e => e.FHelpId).HasColumnName("fHelpId");
            entity.Property(e => e.FDistrictId).HasColumnName("fDistrictId");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FExpDate)
                .HasColumnType("datetime")
                .HasColumnName("fExpDate");
            entity.Property(e => e.FHelpClassId).HasColumnName("fHelpClassId");
            entity.Property(e => e.FHelpDescribe)
                .HasMaxLength(200)
                .HasColumnName("fHelpDescribe");
            entity.Property(e => e.FHelpSkillId).HasColumnName("fHelpSkillId");
            entity.Property(e => e.FHelpStatus).HasColumnName("fHelpStatus");
            entity.Property(e => e.FLatitude).HasColumnName("fLatitude");
            entity.Property(e => e.FLongitude).HasColumnName("fLongitude");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FMemberType).HasColumnName("fMemberType");
            entity.Property(e => e.FMfdDate)
                .HasColumnType("datetime")
                .HasColumnName("fMfdDate");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FNid)
                .HasMaxLength(50)
                .HasColumnName("fNId");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FPoint).HasColumnName("fPoint");
            entity.Property(e => e.FTaxId).HasColumnName("fTaxID");
        });

        modelBuilder.Entity<THelpClass>(entity =>
        {
            entity.HasKey(e => e.FHelpClassId);

            entity.ToTable("tHelpClass");

            entity.Property(e => e.FHelpClassId).HasColumnName("fHelpClassId");
            entity.Property(e => e.FHelpClass)
                .HasMaxLength(50)
                .HasColumnName("fHelpClass");
        });

        modelBuilder.Entity<THelpMessageRecord>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tHelpMessageRecord");

            entity.Property(e => e.FContent)
                .HasMaxLength(200)
                .HasColumnName("fContent");
            entity.Property(e => e.FHelpId).HasColumnName("fHelpId");
            entity.Property(e => e.FMessageRecord)
                .ValueGeneratedOnAdd()
                .HasColumnName("fMessageRecord");
            entity.Property(e => e.FPublicOrNot).HasColumnName("fPublicOrNot");
            entity.Property(e => e.FSendDate)
                .HasColumnType("datetime")
                .HasColumnName("fSendDate");
        });

        modelBuilder.Entity<THelpSkill>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tHelpSkill");

            entity.Property(e => e.FHelpSkill)
                .HasMaxLength(50)
                .HasColumnName("fHelpSkill");
            entity.Property(e => e.FHelpSkillId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fHelpSkillId");
        });

        modelBuilder.Entity<TInvestRecord>(entity =>
        {
            entity.HasKey(e => e.FRepoId).HasName("PK__tInvestR__0ECC57CCA8608E4C");

            entity.ToTable("tInvestRecord");

            entity.Property(e => e.FRepoId)
                .ValueGeneratedNever()
                .HasColumnName("fRepoId");
            entity.Property(e => e.FCost)
                .HasColumnType("money")
                .HasColumnName("fCost");
            entity.Property(e => e.FDealPrice)
                .HasColumnType("money")
                .HasColumnName("fDealPrice");
            entity.Property(e => e.FEndDate)
                .HasColumnType("datetime")
                .HasColumnName("fEndDate");
            entity.Property(e => e.FMemberId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FProSum).HasColumnName("fProSum");
            entity.Property(e => e.FProTsum).HasColumnName("fProTSum");
            entity.Property(e => e.FSoldTime)
                .HasColumnType("datetime")
                .HasColumnName("fSoldTime");
            entity.Property(e => e.FStartDate)
                .HasColumnType("datetime")
                .HasColumnName("fStartDate");
            entity.Property(e => e.FStockId).HasColumnName("fStockId");
            entity.Property(e => e.FStockQty).HasColumnName("fStockQty");
        });

        modelBuilder.Entity<TLike>(entity =>
        {
            entity.HasKey(e => e.FLikesSid);

            entity.ToTable("tLikes");

            entity.Property(e => e.FLikesSid).HasColumnName("fLikesSId");
            entity.Property(e => e.FPostId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("fPostId");
            entity.Property(e => e.FTimestamp)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("fTimestamp");
            entity.Property(e => e.FUserId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("fUserId");
        });

        modelBuilder.Entity<TLoginRecord>(entity =>
        {
            entity.HasKey(e => e.FLogId);

            entity.ToTable("tLoginRecord");

            entity.Property(e => e.FLogId).HasColumnName("fLogId");
            entity.Property(e => e.FIp)
                .HasMaxLength(50)
                .HasColumnName("fIp");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FTimestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("fTimestamp");
        });

        modelBuilder.Entity<TMatch>(entity =>
        {
            entity.HasKey(e => e.FMatchId);

            entity.ToTable("tMatch");

            entity.Property(e => e.FMatchId).HasColumnName("fMatchId");
            entity.Property(e => e.FGrade).HasColumnName("fGrade");
            entity.Property(e => e.FGradeDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fGradeDateTime");
            entity.Property(e => e.FHelpId).HasColumnName("fHelpId");
            entity.Property(e => e.FHelperEmail)
                .HasMaxLength(50)
                .HasColumnName("fHelperEmail");
            entity.Property(e => e.FHelperName)
                .HasMaxLength(50)
                .HasColumnName("fHelperName");
            entity.Property(e => e.FMatchDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fMatchDateTime");
            entity.Property(e => e.FMatchStatus).HasColumnName("fMatchStatus");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FMessage)
                .HasMaxLength(200)
                .HasColumnName("fMessage");
            entity.Property(e => e.FPoint).HasColumnName("fPoint");
        });

        modelBuilder.Entity<TMemberSkill>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tMemberSkill");

            entity.Property(e => e.FHelpSkillId).HasColumnName("fHelpSkillId");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
        });

        modelBuilder.Entity<TMessage>(entity =>
        {
            entity.HasKey(e => e.FMessid);

            entity.ToTable("tMessage");

            entity.Property(e => e.FMessid).HasColumnName("fMessid");
            entity.Property(e => e.FCreateTime)
                .HasColumnType("datetime")
                .HasColumnName("fCreateTime");
            entity.Property(e => e.FImageName)
                .HasMaxLength(1000)
                .HasColumnName("fImageName");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(200)
                .HasColumnName("fImagePath");
            entity.Property(e => e.FIsRead).HasColumnName("fIsRead");
            entity.Property(e => e.FMessContent)
                .HasMaxLength(500)
                .HasColumnName("fMessContent");
            entity.Property(e => e.FMessType)
                .HasMaxLength(20)
                .HasColumnName("fMessType");
            entity.Property(e => e.FRid)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("fRId");
            entity.Property(e => e.FSid)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("fSId");
            entity.Property(e => e.FTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("fTimestamp");
            entity.Property(e => e.FUpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("fUpdateTime");
        });

        modelBuilder.Entity<TMgerScActivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tMgerScActivity");

            entity.Property(e => e.FActivityId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fActivityId");
            entity.Property(e => e.FActivityType)
                .HasMaxLength(100)
                .HasColumnName("fActivityType");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FOccurreAt)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("fOccurreAt");
        });

        modelBuilder.Entity<TMgrScFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tMgrScFile");

            entity.Property(e => e.FFileId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fFileId");
            entity.Property(e => e.FFileName)
                .HasMaxLength(256)
                .HasColumnName("fFileName");
            entity.Property(e => e.FFilePath)
                .HasMaxLength(256)
                .HasColumnName("fFilePath");
            entity.Property(e => e.FFileType)
                .HasMaxLength(50)
                .HasColumnName("fFileType");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("fMemberId");
            entity.Property(e => e.FUploadateAt)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("fUploadateAt");
        });

        modelBuilder.Entity<TOrder>(entity =>
        {
            entity.HasKey(e => e.FOrderId);

            entity.ToTable("tOrder");

            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FBeginTime)
                .HasColumnType("datetime")
                .HasColumnName("fBeginTime");
            entity.Property(e => e.FExecStatus).HasColumnName("fExecStatus");
            entity.Property(e => e.FFinishTime)
                .HasColumnType("datetime")
                .HasColumnName("fFinishTime");
            entity.Property(e => e.FOrderTime)
                .HasColumnType("datetime")
                .HasColumnName("fOrderTime");
            entity.Property(e => e.FPersonSid)
                .HasMaxLength(20)
                .HasColumnName("fPersonSId");
            entity.Property(e => e.FProof)
                .HasColumnType("image")
                .HasColumnName("fProof");
            entity.Property(e => e.FStatus).HasColumnName("fStatus");
            entity.Property(e => e.FTotalHelpPoint).HasColumnName("fTotalHelpPoint");
        });

        modelBuilder.Entity<TOrderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tOrderDetail");

            entity.Property(e => e.FAmount).HasColumnName("fAmount");
            entity.Property(e => e.FHelpPoint).HasColumnName("fHelpPoint");
            entity.Property(e => e.FOrderDetailId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fOrderDetailId");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");
        });

        modelBuilder.Entity<TPersonMember>(entity =>
        {
            entity.HasKey(e => e.FPersonSid);

            entity.ToTable("tPersonMember");

            entity.Property(e => e.FPersonSid).HasColumnName("fPersonSId");
            entity.Property(e => e.FAccount)
                .HasMaxLength(50)
                .HasColumnName("fAccount");
            entity.Property(e => e.FBirthDate).HasColumnName("fBirthDate");
            entity.Property(e => e.FDistrictId).HasColumnName("fDistrictId");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FEmailVerified).HasColumnName("fEmailVerified");
            entity.Property(e => e.FFirstName)
                .HasMaxLength(50)
                .HasColumnName("fFirstName");
            entity.Property(e => e.FIdentification)
                .HasMaxLength(20)
                .HasColumnName("fIdentification");
            entity.Property(e => e.FIp)
                .HasMaxLength(50)
                .HasColumnName("fIp");
            entity.Property(e => e.FLastLoginAt)
                .HasColumnType("datetime")
                .HasColumnName("fLastLoginAt");
            entity.Property(e => e.FLastName)
                .HasMaxLength(50)
                .HasColumnName("fLastName");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FMemberImage).HasColumnName("fMemberImage");
            entity.Property(e => e.FMemberImagePath)
                .HasMaxLength(100)
                .HasColumnName("fMemberImagePath");
            entity.Property(e => e.FPassword)
                .HasMaxLength(20)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPermissions).HasColumnName("fPermissions");
            entity.Property(e => e.FProvider)
                .HasMaxLength(30)
                .HasColumnName("fProvider");
            entity.Property(e => e.FRegDate)
                .HasColumnType("datetime")
                .HasColumnName("fRegDate");
            entity.Property(e => e.FSex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fSex");
            entity.Property(e => e.FStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fStatus");
            entity.Property(e => e.FSubId)
                .HasMaxLength(100)
                .HasColumnName("fSubId");
            entity.Property(e => e.FTotalAsset).HasColumnName("fTotalAsset");
            entity.Property(e => e.FTotalHelpPoint).HasColumnName("fTotalHelpPoint");
            entity.Property(e => e.FUserName)
                .HasMaxLength(50)
                .HasColumnName("fUserName");
        });

        modelBuilder.Entity<TPointList>(entity =>
        {
            entity.HasKey(e => e.FPointListId);

            entity.ToTable("tPointList");

            entity.Property(e => e.FPointListId).HasColumnName("fPointListId");
            entity.Property(e => e.FMatchId).HasColumnName("fMatchId");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FRecordTime)
                .HasColumnType("datetime")
                .HasColumnName("fRecordTime");
            entity.Property(e => e.FSourse).HasColumnName("fSourse");
        });

        modelBuilder.Entity<TPost>(entity =>
        {
            entity.HasKey(e => e.FPostId);

            entity.ToTable("tPost");

            entity.Property(e => e.FPostId).HasColumnName("fPostId");
            entity.Property(e => e.FCreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedTime");
            entity.Property(e => e.FFinStatement)
                .HasColumnType("image")
                .HasColumnName("fFinStatement");
            entity.Property(e => e.FLikes).HasColumnName("fLikes");
            entity.Property(e => e.FMemberId)
                .HasMaxLength(20)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FMemberType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fMemberType");
            entity.Property(e => e.FParentCommentId).HasColumnName("fParentCommentId");
            entity.Property(e => e.FPostContent)
                .HasMaxLength(256)
                .HasColumnName("fPostContent");
            entity.Property(e => e.FUserName)
                .HasMaxLength(50)
                .HasColumnName("fUserName");
        });

        modelBuilder.Entity<TProduct>(entity =>
        {
            entity.HasKey(e => e.FProductId);

            entity.ToTable("tProduct");

            entity.Property(e => e.FProductId).HasColumnName("fProductId");
            entity.Property(e => e.FDescription)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fDescription");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(50)
                .HasColumnName("fImagePath");
            entity.Property(e => e.FProductCategoryId).HasColumnName("fProductCategoryId");
            entity.Property(e => e.FProductName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fProductName");
            entity.Property(e => e.FSales).HasColumnName("fSales");
            entity.Property(e => e.FSponsorId).HasColumnName("fSponsorId");
            entity.Property(e => e.FStatus).HasColumnName("fStatus");
            entity.Property(e => e.FStock).HasColumnName("fStock");
            entity.Property(e => e.FUnitlHelpPoint).HasColumnName("fUnitlHelpPoint");
        });

        modelBuilder.Entity<TProductCategory>(entity =>
        {
            entity.HasKey(e => e.FProductCategoryId);

            entity.ToTable("tProductCategory");

            entity.Property(e => e.FProductCategoryId).HasColumnName("fProductCategoryId");
            entity.Property(e => e.FDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fDescription");
            entity.Property(e => e.FProductCategoryName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fProductCategoryName");
        });

        modelBuilder.Entity<TRefreshToken>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tRefreshTokens");

            entity.Property(e => e.FCreatedAt).HasColumnName("fCreatedAt");
            entity.Property(e => e.FCreatedByIp)
                .HasMaxLength(50)
                .HasColumnName("fCreatedByIp");
            entity.Property(e => e.FExpiryDate).HasColumnName("fExpiryDate");
            entity.Property(e => e.FId)
                .IsRequired()
                .HasMaxLength(450)
                .HasColumnName("fId");
            entity.Property(e => e.FIsRevoked).HasColumnName("fIsRevoked");
            entity.Property(e => e.FReplacedByToken).HasColumnName("fReplacedByToken");
            entity.Property(e => e.FRevokedAt).HasColumnName("fRevokedAt");
            entity.Property(e => e.FRevokedByIp)
                .HasMaxLength(50)
                .HasColumnName("fRevokedByIp");
            entity.Property(e => e.FToken)
                .IsRequired()
                .HasColumnName("fToken");
            entity.Property(e => e.FUserId)
                .IsRequired()
                .HasMaxLength(450)
                .HasColumnName("fUserId");
        });

        modelBuilder.Entity<TSponsor>(entity =>
        {
            entity.HasKey(e => e.FSponsorId);

            entity.ToTable("tSponsor");

            entity.Property(e => e.FSponsorId).HasColumnName("fSponsorId");
            entity.Property(e => e.FAddress)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("fAddress");
            entity.Property(e => e.FCapital)
                .HasColumnType("money")
                .HasColumnName("fCapital");
            entity.Property(e => e.FIntroduction)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("fIntroduction");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fPhone");
            entity.Property(e => e.FSponsorCategoryId).HasColumnName("fSponsorCategoryId");
            entity.Property(e => e.FSponsorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fSponsorName");
            entity.Property(e => e.FStatus).HasColumnName("fStatus");
        });

        modelBuilder.Entity<TSponsorCategory>(entity =>
        {
            entity.HasKey(e => e.FSponsorCategoryId);

            entity.ToTable("tSponsorCategory");

            entity.Property(e => e.FSponsorCategoryId).HasColumnName("fSponsorCategoryId");
            entity.Property(e => e.FDescription)
                .IsRequired()
                .HasColumnName("fDescription");
            entity.Property(e => e.FSponsorCategoryrName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fSponsorCategoryrName");
        });

        modelBuilder.Entity<TStock>(entity =>
        {
            entity.HasKey(e => e.FStockId).HasName("PK__tStock__966DF63F3E161DE1");

            entity.ToTable("tStock");

            entity.Property(e => e.FStockId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("fStockId");
            entity.Property(e => e.FStockName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("fStockName");
            entity.Property(e => e.FStockPriceN)
                .HasColumnType("money")
                .HasColumnName("fStockPriceN");
        });

        modelBuilder.Entity<TStockInStock>(entity =>
        {
            entity.HasKey(e => e.FInStockId);

            entity.ToTable("tStockInStock");

            entity.Property(e => e.FInStockId).HasColumnName("fInStockId");
            entity.Property(e => e.FBalancePrice)
                .HasColumnType("money")
                .HasColumnName("fBalancePrice");
            entity.Property(e => e.FBrokerId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fBrokerId");
            entity.Property(e => e.FEstPro)
                .HasColumnType("money")
                .HasColumnName("fEstPro");
            entity.Property(e => e.FEstProP).HasColumnName("fEstProP");
            entity.Property(e => e.FLeftStock).HasColumnName("fLeftStock");
            entity.Property(e => e.FMemberId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FStockAdj).HasColumnName("fStockAdj");
            entity.Property(e => e.FStockCost)
                .HasColumnType("money")
                .HasColumnName("fStockCost");
            entity.Property(e => e.FStockId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("fStockId");
            entity.Property(e => e.FStockName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("fStockName");
            entity.Property(e => e.FStockNow).HasColumnName("fStockNow");
            entity.Property(e => e.FStockPriceN)
                .HasColumnType("money")
                .HasColumnName("fStockPriceN");
            entity.Property(e => e.FStockPriceT)
                .HasColumnType("money")
                .HasColumnName("fStockPriceT");
            entity.Property(e => e.FStockPriceTs)
                .HasColumnType("money")
                .HasColumnName("fStockPriceTS");
            entity.Property(e => e.FStockTran).HasColumnName("fStockTran");
            entity.Property(e => e.FTranType)
                .HasMaxLength(50)
                .HasColumnName("fTranType");
        });

        modelBuilder.Entity<TTranRecord>(entity =>
        {
            entity.HasKey(e => e.FTranId).HasName("PK__tTranRec__56FABBBF8D192D15");

            entity.ToTable("tTranRecord");

            entity.Property(e => e.FTranId)
                .ValueGeneratedNever()
                .HasColumnName("fTranId");
            entity.Property(e => e.FBrokerId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fBrokerId");
            entity.Property(e => e.FBuySell)
                .IsRequired()
                .HasMaxLength(5)
                .HasColumnName("fBuySell");
            entity.Property(e => e.FMemberId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fMemberId");
            entity.Property(e => e.FStockId).HasColumnName("fStockId");
            entity.Property(e => e.FStockPrice)
                .HasColumnType("money")
                .HasColumnName("fStockPrice");
            entity.Property(e => e.FStockQty).HasColumnName("fStockQty");
            entity.Property(e => e.FTranTime)
                .HasColumnType("datetime")
                .HasColumnName("fTranTime");
            entity.Property(e => e.FTranType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fTranType");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}